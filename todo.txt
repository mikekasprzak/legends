
TODO List for 2011 GEL and Foundation Project "Legends" Tree Restructure

PROJECT (Legends) **
- Create ContentPool classes
  - DO NOT replace Texture Pool, but leave it there for legacy support (Smiles)
  - Instead, update the way Legends and Experiments get content
  - How to get content
    - Ask ContentPool for a resource
    - ContentPool returns a handle
    - Content can be (optionally) requested Asyncronously
      - Thusly, Content handles have a means of checknig if the content is loaded
    - What might be useful is if Content handles supported proxy objects
      - For textures, the dummy texture of "0" works as a "texture not loaded"
      - A different color or pattern might be more helpful to identify textures
        that are still in the process of being loaded. Undecided.
      - But my point here is a proxy/dummy object, texture, thing could be loaded
        instead of the actual object in the interm, as we wait for the real one
        to load.
        - An empty string
        - A model with no geometry
        - A blank WAV file
      - Some assets make more sense to exist and not require "IsLoaded()" checks.
      - Eventually, what may become useful is having a low-res or low-detail version
        loaded.
        - This may only apply to Textures
        - Sounds, at least voice tracks and music tracks make more sense to be
          played only once they are buffered enuogh (audio cut-outs are lame)
        - 3D models are only useful when fully loaded, but LOD models may work.
          - Still, an LOD model is ideally based off the vertices of the original
          - Then the LOD model needs all the bone weight information... meh.
          - I think Legends doesn't need LOD models, due to consistent viewport.
- Add multi-page BMFont renderer.
- Push and Pull a content + EXE from the beta.sykhronics.net website.
  - Keep a logs folder, store files per play session here
  - Record inputs, and be able to reproduce them/play them back
  - Squirrel as a configuration language (write a config file, Tag = Value)
  - Offer to sync these files to me (private storage space) so I can watch them
  - Text Interface
    - Create an account name (chosen by the person)
    - Must enter an access/promo key (provide 10 of these, one per judge)
    - Keys are single use
    - Offer to Login or Create.
  - Updater frontend (runs the updater located in My Documents, or in the install folder)
  - The updater then runs the game, if all updates are applied
  - Store updated content in "All Users", and be able to set specific users

PROJECT GOAL (Legends) **
- A couple rooms
- Fighting
- Sound and Music


TOOLCHAIN **
- Add Name, Short Name, Packed Name options to SKU's
  - Have defaults if not set
- OpenGL/ES 1 and OpenGL/ES 2 in a single code path merge!
- Premake setup (i.e. MSVC and Xcode)
  - Update to generate premake lua script based on the SKU and platform data
  - place the msvc project in to obj folder, and write exe to output
  - do xcode generator
- Airplay setup (iOS, Android, etc)
  - Do this
- Palm webOS setup
  - Do this
- Smiles
  - Do this
- standard packaging method that creates a folder and copies all files in to
  - Then per platform code can be run on the package folder, such as palm and linux
  - should be generic enough to use for android (i.e. copy in to target)
- ??


Completed **

- content.sh -- New tool in root for checking out
- ".repos" -- New file containing the repository root (default svn://192.168.0.101/legends/)
- Add source tree
- New Game Folders -- GameBlah
  - Rename Game to Smiles, GameSmiles, or SmilesGame (something distinct)
  - Add Legends, GameLegends, or LegendsGame folder (see above)
- Smiles and Legends will require separate root folders (d:/Smiles and d:/Legends)
  - Experiments needs some way to co-exist
    - GameExperiments (code and content), then some plugable code area for distinct tests
- Will need some good way of differentiating/collecting project files generate/stored per proj.
  - Smiles has multiple projects, as will other games.
- New Experiments Tree
  - Should be easy to add a new dummy app
    - Template!
- Move Custom to SKU folder, no more weird share system!
