// - ------------------------------------------------------------------------------------------ - //
// Assert //
// - ------------------------------------------------------------------------------------------ - //
#ifndef __GEL_DEBUG_Rebel_Assert_H__
#define __GEL_DEBUG_Rebel_Assert_H__
// - ------------------------------------------------------------------------------------------ - //
#include <stdlib.h>
#include "Log.h"
// - ------------------------------------------------------------------------------------------ - //
/*
// - ------------------------------------------------------------------------------------------ - //
#ifndef NOLOGGING
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
#ifdef _MSC_VER
*/
// - ------------------------------------------------------------------------------------------ - //
#ifndef NDEBUG
// - ------------------------------------------------------------------------------------------ - //
// Assertion //
#define Assert( ___TEST, ... ) \
	{if ( ___TEST ) { \
		LogAlways( "- ======================================================== -" ); \
		_LogAlways( "Assert Error: " ); \
		LogAlways( __VA_ARGS__ ); \
		LogAlways( "   Line: %i  File: %s", __LINE__, __FILE__ ); \
		LogAlways( "   Func: %s", __func__ ); \
		LogAlways( "- ======================================================== -" ); \
		::exit(1); \
	}}
// - ------------------------------------------------------------------------------------------ - //
// Warnings //
#define Warning( ___TEST, ... ) \
	{if ( ___TEST ) { \
		LogAlways( "- -------------------------------------------------------- -" ); \
		_LogAlways( "Warning: " ); \
		LogAlways( __VA_ARGS__ ); \
		LogAlways( "   Line: %i  File: %s", __LINE__, __FILE__ ); \
		LogAlways( "   Func: %s\n", __func__ ); \
	}}
// - ------------------------------------------------------------------------------------------ - //
// Warnings (return) //
#define return_Warning( ___TEST, ... ) \
	{if ( ___TEST ) { \
		LogAlways( "- -------------------------------------------------------- -" ); \
		_LogAlways( "Warning: " ); \
		LogAlways( __VA_ARGS__ ); \
		LogAlways( "   Line: %i  File: %s", __LINE__, __FILE__ ); \
		LogAlways( "   Func: %s\n", __func__ ); \
		return; \
	}}
// - ------------------------------------------------------------------------------------------ - //
// Warnings (return value) //
#define return_value_Warning( ___VAL, ___TEST, ... ) \
	{if ( ___TEST ) { \
		LogAlways( "- -------------------------------------------------------- -" ); \
		_LogAlways( "Warning: " ); \
		LogAlways( __VA_ARGS__ ); \
		LogAlways( "   Line: %i  File: %s", __LINE__, __FILE__ ); \
		LogAlways( "   Func: %s\n", __func__ ); \
		return ___VAL; \
	}}
// - ------------------------------------------------------------------------------------------ - //
#else // NDEBUG //
// - ------------------------------------------------------------------------------------------ - //
#define Assert( ... ) ;
#define Warning( ... ) ;
#define return_Warning( ... ) ;
#define return_value_Warning( ... ) ;
// - ------------------------------------------------------------------------------------------ - //
#endif // NDEBUG //
/*
// - ------------------------------------------------------------------------------------------ - //
//// Error Logging //
//#define ELog( ... ) \
//	{ \
//		Log( "Error: " ## __VA_ARGS__ ); \
//		Log( " Line: %i  File: %s", __LINE__, __FILE__ ); \
//		Log( " Func: %s\n", __func__ ); \
//	}
//// - ------------------------------------------------------------------------------------------ - //
//// Error Logging (return) //
//#define return_ELog( ... ) \
//	{ \
//		Log( ANSI_BG_RED "Error: " ## __VA_ARGS__ ); \
//		Log( " Line: %i  File: %s", __LINE__, __FILE__ ); \
//		Log( " Func: %s\n", __func__ ); \
//		return; \
//	}
//// - ------------------------------------------------------------------------------------------ - //
//// Error Logging (return value) //
//#define return_value_ELog( ___VAL, ... ) \
//	{ \
//		Log( ANSI_BG_RED "Error: " ## __VA_ARGS__ ); \
//		Log( " Line: %i  File: %s", __LINE__, __FILE__ ); \
//		Log( " Func: %s\n", __func__ ); \
//		return ___VAL; \
//	}
// - ------------------------------------------------------------------------------------------ - //
#else // _MSC_VER //
// - ------------------------------------------------------------------------------------------ - //
#ifndef NDEBUG
// - ------------------------------------------------------------------------------------------ - //
// Assertion //
#define Assert( ___TEST, ... ) \
	if ( ___TEST ) { \
		Log( "- ======================================================== -" ); \
		_Log( ANSI_BG_RED "Assert Error: " __VA_ARGS__ ); \
		Log( ANSI_NORMAL ); \
		Log( "   Line: %i  File: %s", __LINE__, __FILE__ ); \
		Log( "   Func: %s", __PRETTY_FUNCTION__ ); \
		Log( "- ======================================================== -" ); \
		::exit(1); \
	}
// - ------------------------------------------------------------------------------------------ - //
// Warnings //
#define Warning( ___TEST, ... ) \
	if ( ___TEST ) { \
		_Log( ANSI_RED "Warning: " __VA_ARGS__ ); \
		Log( ANSI_NORMAL ); \
		Log( "   Line: %i  File: %s", __LINE__, __FILE__ ); \
		Log( "   Func: %s\n", __PRETTY_FUNCTION__ ); \
	}
// - ------------------------------------------------------------------------------------------ - //
// Warnings (return) //
#define return_Warning( ___TEST, ... ) \
	if ( ___TEST ) { \
		_Log( ANSI_RED "Warning: " __VA_ARGS__ ); \
		Log( ANSI_NORMAL ); \
		Log( "   Line: %i  File: %s", __LINE__, __FILE__ ); \
		Log( "   Func: %s\n", __PRETTY_FUNCTION__ ); \
		return; \
	}
// - ------------------------------------------------------------------------------------------ - //
// Warnings (return value) //
#define return_value_Warning( ___VAL, ___TEST, ... ) \
	if ( ___TEST ) { \
		_Log( ANSI_RED "Warning: " __VA_ARGS__ ); \
		Log( ANSI_NORMAL ); \
		Log( "   Line: %i  File: %s", __LINE__, __FILE__ ); \
		Log( "   Func: %s\n", __PRETTY_FUNCTION__ ); \
		return ___VAL; \
	}
// - ------------------------------------------------------------------------------------------ - //
#else // NDEBUG //
// - ------------------------------------------------------------------------------------------ - //
#define Assert( ... ) ;
#define Warning( ... ) ;
#define return_Warning( ... ) ;
#define return_value_Warning( ... ) ;
// - ------------------------------------------------------------------------------------------ - //
#endif // NDEBUG //
// - ------------------------------------------------------------------------------------------ - //
//// Error Logging //
//#define ELog( ... ) \
//	{ \
//		_Log( ANSI_BG_RED "Error: " __VA_ARGS__ ); \
//		Log( ANSI_NORMAL ); \
//		Log( " Line: %i  File: %s", __LINE__, __FILE__ ); \
//		Log( " Func: %s\n", __PRETTY_FUNCTION__ ); \
//	}
//// - ------------------------------------------------------------------------------------------ - //
//// Error Logging //
//#define return_ELog( ... ) \
//	{ \
//		_Log( ANSI_BG_RED "Error: " __VA_ARGS__ ); \
//		Log( ANSI_NORMAL ); \
//		Log( " Line: %i  File: %s", __LINE__, __FILE__ ); \
//		Log( " Func: %s\n", __PRETTY_FUNCTION__ ); \
//		return; \
//	}
//// - ------------------------------------------------------------------------------------------ - //
//// Error Logging //
//#define return_value_ELog( ___VAL, ... ) \
//	{ \
//		_Log( ANSI_BG_RED "Error: " __VA_ARGS__ ); \
//		Log( ANSI_NORMAL ); \
//		Log( " Line: %i  File: %s", __LINE__, __FILE__ ); \
//		Log( " Func: %s\n", __PRETTY_FUNCTION__ ); \
//		return ___VAL; \
//	}
// - ------------------------------------------------------------------------------------------ - //
#endif // _MSC_VER //
// - ------------------------------------------------------------------------------------------ - //
#else // NDEBUG NOLOGGING //
// - ------------------------------------------------------------------------------------------ - //
#define Assert( ... ) ;
#define Warning( ... ) ;
//#define ELog( ... );
//#define return_ELog( ... );
//#define return_value_ELog( ... );
// - ------------------------------------------------------------------------------------------ - //
#endif // NDEBUG NOLOGGING //
// - ------------------------------------------------------------------------------------------ - //
*/
// - ------------------------------------------------------------------------------------------ - //
#endif // __GEL_DEBUG_Rebel_Assert_H__ //
// - ------------------------------------------------------------------------------------------ - //
