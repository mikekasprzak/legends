/*
 * adpcore.h
 * 
 * Copyright (C) 2009 - 2010, Intel Corporation. All rights reserved
 *
 *
 * Any software source code reprinted in this document is furnished 
 * under a software license and may only be used or copied in accordance 
 * with the license in the Intel-EULA.txt file installed 
 * as part of the product installation
 */

#ifndef __ADPCORE_H__
#define __ADPCORE_H__

#ifdef __cplusplus
extern "C" {
#endif

/**
 * ADP_RET_CODE:
 *
 * Constants for the core library
 */
typedef enum ADP_RET_CODE_LIST 
{
    ADP_FAILURE = -1,
    ADP_SUCCESS = 0,
    ADP_NOT_INITIALIZED = 1,
    ADP_NOT_AVAILABLE = 2,
    ADP_INCOMPATIBLE_VERSION = 3,
    ADP_ERR_DATA_TOO_BIG = 4,
    ADP_AUTHORIZED = 5,
    ADP_NOT_AUTHORIZED = 6,
    ADP_AUTHORIZATION_EXPIRED = 7,
    ADP_NO_APP_BEGIN_EVENT = 8,
    ADP_TIMEOUT = 9
} ADP_RET_CODE;

/**
 * IDSIZE:
 *
 * Define the number of unsigned long for ID
 */
#define ADP_IDSIZE      4

typedef unsigned long ADP_IDELEMENT;

/**
 * ADP_APPLICATIONID:
 *
 * Application ID type definitions
 */
typedef struct {
    ADP_IDELEMENT field[ADP_IDSIZE];
} ADP_APPLICATIONID;

/**
 * ADP_COMPONENTID:
 *
 * Component ID type definitions
 */
typedef struct {
    ADP_IDELEMENT field[ADP_IDSIZE];
} ADP_COMPONENTID;

/**
 * ADP_CrashReportField:
 * 
 * Structure used with API_ReportCrash to add custom data to a crash report (max 20 per crash report)
 * The maximum size of name string in the custom report field is 80 chars
 * The maximum size of value string in the custom report field is 80 chars
 */
typedef struct {
	wchar_t *name;
	wchar_t *value;
} ADP_CrashReportField;

/**
 * ADP_API_VERSION:
 *
 * A human readable string of the API version, ie. 1.23.344-beta
 */
extern const wchar_t *ADP_API_VERSION;

/**
 * ADP_API_LEVEL:   
 *
 * Used to determine compatibility between the Application libraries 
 * and the Client Agent. Although the API Level of an application's 
 * Application Library must be the same as the Client Agent, 
 * the Agent Client can support a range of ADP_API_LEVELs concurrently. 
 * For example, there could be several releases of the Application libraries, each 
 * with a different ADP_API_VERSION value, that share the same ADP_API_LEVEL. 
 */
extern const unsigned long ADP_API_LEVEL;

extern const ADP_APPLICATIONID ADP_DEBUG_APPLICATIONID;
extern const ADP_COMPONENTID ADP_DEBUG_COMPONENTID;
extern const ADP_APPLICATIONID ADP_EXPIRED_APPLICATIONID;
extern const ADP_COMPONENTID ADP_EXPIRED_COMPONENTID;

/**
 * ADP_Initialize:
 * 
 * Setup internal data structures, and determine whether the system is 
 * compatible.  This function must be the first ADP function call else 
 * the other functions will fail with the error code ADP_NOT_INITIALIZED.
 * Some APIs use libgcrypt library functions. ADP_Initialize will set 
 * multi-threading call back functions to support multi-threading usage of
 * libgcrypt.
 *
 * Return values are described as below:
 *
 *   ADP_SUCCESS                Function call was successful.
 *
 *   ADP_NOT_AVAILABLE          The Client Agent is not installed or is not running
 *
 *   ADP_INCOMPATIBLE_VERSION   The library and Agent Client are incompatible. They 
 *                              do not have to be the same version, just compatible at 
 *                              the call level. See SDK API Versioning. 
 *
 *   ADP_FAILURE                Unexpected internal failure.
 *
 *   ADP_TIMEOUT                The connection between SDK and Client Agent timed out.
 *
 */
extern ADP_RET_CODE ADP_Initialize (void);

/**
 * ADP_Close:
 * 
 * Release internal data structures, and shutdown connections used by the library.
 *
 * Return values are described as below:
 *
 *   ADP_SUCCESS                Function call was successful. 
 *
 *   ADP_FAILURE                Other failure e.g., memory, file, or communication. System is
 *                              in an indeterminate state.
 *
 */
extern ADP_RET_CODE ADP_Close (void);

/**
 * ADP_IsAuthorized:
 *
 * @ApplicationId           The unique id generated by the Developer Portal when 
 *                          a developer creates the application in the site. 
 *                          The developer copies the value from the site into this argument. 
 *
 * ADP_IsAuthorized () determines whether the application is authorized to run. It 
 * should be called by an application after a successful call to ADP_Initialize (). Calling any 
 * Application Library function (besides ADP_Initialize()) without a successful call to 
 * ADP_IsAuthorized () (return state = ADP_AUTHORIZED) will result in an error: 
 * ADP_NOT_AUTHORIZED. 
 * 
 * It is not an error to call ADP_IsAuthorized() more than once, but only the first Application ID is 
 * used. The Application ID passed in is used by subsequent Application Library functions, ie. 
 * ADP_ReportCrash(). 
 * 
 * Return values are described as below:
 *
 *   ADP_AUTHORIZED             Application is authorized to run. 
 *
 *   ADP_NOT_AUTHORIZED         Application is not authorized to run. 
 *
 *   ADP_AUTHORIZATION_EXPIRED  Application's license has not been refreshed in the required time. 
 *                              It still may be valid. 
 *
 *   ADP_NOT_AVAILABLE          Returned if the Client Agent goes away while the application is running. 
 *                              The application needs to call ADP_Initialize() before trying again. 
 *
 *   ADP_NOT_INITIALIZED        Returned if the ADP_Initialize() function has not been called. 
 *
 *   ADP_FAILURE                Unexpected internal failure.
 *
 *   ADP_TIMEOUT                The connection between SDK and Client Agent timed out.
 *
 */
extern ADP_RET_CODE ADP_IsAuthorized (ADP_APPLICATIONID ApplicationID);

/**
 * ADP_IsAppAuthorized:
 *
 * @ComponentId:    The ID of the component 
 *
 * ADP_IsAppAuthorized () determines whether an application is authorized to use a 
 * component. It is the responsibility of the Component developer to call ADP_IsAppAuthorized(). The 
 * component should check for authorized when it was loaded by an application, during its 
 * constructor or as part of an initialization sequence. 
 *
 * Return values are described as below:
 *
 *   ADP_AUTHORIZED             Application is authorized to use the component. 
 *
 *   ADP_NOT_AUTHORIZED         Application is not authorized to use the component.  
 *
 *   ADP_AUTHORIZATION_EXPIRED  Application's license to use the component has not 
 *                              been refreshed in the required time. It still may be valid. 
 *
 *   ADP_NOT_AVAILABLE          Returned if the Client Agent goes away while the application 
 *                              is running. The application needs to call ADP_Initialize() 
 *                              before trying again. 
 *
 *   ADP_NOT_INITIALIZED        Returned if the ADP_Initialize() function has not be called 
 *
 *   ADP_FAILURE                Unexpected internal failure.
 *
 *   ADP_TIMEOUT                The connection between SDK and Client Agent timed out.
 *
 */
extern ADP_RET_CODE ADP_IsAppAuthorized (ADP_COMPONENTID ComponentID);

/**
 * ADP_ReportCrash:
 * 
 * @Module:              The name of the application module where the error/crash occurred (max 80 chars)
 * 
 * @LineNumber:          The line number where the error/crash occurred (long data type)
 * 
 * @Message:             A short message describing the error/crash or some basic information (max 80 chars) 
 * 
 * @Category:            A user-defined text field that can be used for sorting and grouping crash reports 
 *                       in the Developer Dashboard (max 80 chars)
 * 
 * @ErrorData:           The detailed error data in text format to be attached to the crash record (max 4000 chars) 
 * 
 * @ErrorDataSize:       The size of data to be attached to the crash record. 
 * 
 * @CustomFields:        The customized data field to be attached to the crash record, in the format of ADP_CrashReportField. 
 * 
 * @CustomFieldNumber:   The number of customized data fields to be attached to the crash record (max 20 custom fields)
 *
 * ADP_ReportCrash() is used by an application to report a crash. The Client Agent is responsible for delivering 
 * the crash report and the dump information to the Store Backend where the developer 
 * can view and assess the information. 
 *
 * The client agent will add additional system information to the crash report prior to sending it to the 
 * store back end. It is the developer's responsibility to catch fatal errors or crashes and call the 
 * ADP_ReportCrash() function. 
 * 
 * A Crash Report is extended by declaring an array of ADP_CrashReportField, setting the name and values, 
 * and passing it to ADP_ReportCrash().  A maximum of 20 custom report fields can be added to a single crash report.
 *
 * Notice that components should not call ADP_ReportCrash(), only applications. 
 *
 * Return values are described as below:
 *
 *   ADP_SUCCESS            Function call was successful. 
 * 
 *   ADP_ERR_DATA_TOO_BIG   Error Data is too big. 
 *
 *   ADP_NOT_AVAILABLE      Returned if the Client Agent goes away while the application 
 *                          is running. The application must call ADP_Initialize() before trying again. 
 *
 *   ADP_NOT_INITIALIZED    Returned if the ADP_Initialize() function has not been called. 
 *   
 *   ADP_NOT_AUTHORIZED     Returned if the ADP_IsAppAuthorized() function has not been called 
 *                          with return code ADP_AUTHORIZED. 
 * 
 *   ADP_FAILURE            Unexpected internal failure.
 *
 *   ADP_TIMEOUT            The connection between SDK and Client Agent timed out.
 *
 */
extern ADP_RET_CODE ADP_ReportCrash (
                const wchar_t *Module,
                unsigned long LineNumber,
                const wchar_t *Message,
                const wchar_t *Category,
                const wchar_t *ErrorData,
                unsigned long ErrorDataSize,
                ADP_CrashReportField *CustomFields,
                unsigned long CustomFieldsNumber
                );

/**
 * ADP_ApplicationBeginEvent:
 *
 * Creates an application start usage record. A call to this function records 
 * that the application was run. A subsequent call to ADP_ApplicationEndEvent() 
 * must be made to record the duration of use. 
 *
 * Return values are described as below:
 *
 *   ADP_SUCCESS            Function call was successful. 
 *
 *   ADP_NOT_AVAILABLE      Returned if the Client Agent goes away
 *                          while the application is running. The 
 *                          application needs to call ADP_Initialize() 
 *                          before trying again. 
 *
 *   ADP_NOT_INITIALIZED    Returned if the ADP_Initialize() function has 
 *                          not been called. 
 *
 *   ADP_NOT_AUTHORIZED     Returned if the ADP_IsAppAuthorized() function 
 *                          has not be called with return code ADP_AUTHORIZED. 
 *
 *   ADP_FAILURE            Unexpected internal failure.
 *
 *   ADP_TIMEOUT            The connection between SDK and Client Agent timed out.
 *
 */
extern ADP_RET_CODE ADP_ApplicationBeginEvent (void);

/**
 * ADP_ApplicationEndEvent:
 *
 * Creates an application end usage record. It is not an error to call this function 
 * multiple times, but only the last call is used. A prior call to ADP_ApplicationBeginEvent() 
 * is required. This function does not need to be called if the developer just wants to 
 * track the number of times the application is used and not how long is it used. 
 *
 * Return values are described as below:
 *
 *   ADP_SUCCESS            Function call was successful. 
 *
 *   ADP_NO_APP_BEGIN_EVENT Returned if there has been no call to 
 *                          ADP_ApplicationBeginEvent(). 
 *
 *   ADP_NOT_AVAILABLE      Returned if the Client Agent goes away while 
 *                          the application is running. The application needs 
 *                          to call ADP_Initialize() before trying again. 
 *
 *   ADP_NOT_INITIALIZED    Returned if the ADP_Initialize() function has not be called. 
 *
 *   ADP_NOT_AUTHORIZED     Returned if the ADP_IsAppAuthorized() function has not be 
 *                          called with return code ADP_AUTHORIZED. 
 *
 *   ADP_FAILURE            Unexpected internal failure.
 *
 *   ADP_TIMEOUT            The connection between SDK and Client Agent timed out.
 *
 */
extern ADP_RET_CODE ADP_ApplicationEndEvent (void);

#ifdef __cplusplus
}
#endif

#endif //__ADPCORE_H__
