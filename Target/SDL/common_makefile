# - ------------------------------------------------------------------------ - #
include Target/common_tools
# - ------------------------------------------------------------------------ - #

# - ------------------------------------------------------------------------ - #
BINARY_NAME			:=	$(PROJECT_FILE)
TARGET_DIR			:=	output/$(TARGET_NAME)
TARGET				:=	$(TARGET_DIR)/$(BINARY_NAME)$(BINARY_SUFFIX)
# - ------------------------------------------------------------------------ - #

# - ------------------------------------------------------------------------ - #
# Compiler and Linker Flags (NOTE: Optimizations are in Target/common_tools) #
CFLAGS				+=	-fno-strict-aliasing
CPPFLAGS			+=	-fno-rtti -fno-strict-aliasing
LDFLAGS				+=	
# - ------------------------------------------------------------------------ - #

# - ------------------------------------------------------------------------ - #
SRC_FILTER			:=	$(addsuffix /%,$(SRC_FOLDERS))
# - ------------------------------------------------------------------------ - #
ALL_CODE_FILES		:=	$(shell $(TreeTool) src .cpp .c .hpp .h)

CODE_FILES			:=	$(filter %.cpp %.c,$(filter $(SRC_FILTER),$(ALL_CODE_FILES)))
H_FILES				:=	$(filter %.hpp %.h,$(filter $(SRC_FILTER),$(ALL_CODE_FILES)))

INCLUDES			:=	$(addprefix -I,$(INCLUDE_FOLDERS) $(SRC_FOLDERS))
DEFINES				:=	$(addprefix -D,$(DEFINES))
# - ------------------------------------------------------------------------ - #
.O_FILES			:=	$(addprefix obj/$(TARGET_NAME)/,$(addsuffix .o,$(filter-out $(IGNORE_LIST),$(CODE_FILES))))
.O_FOLDERS			:=	$(sort $(dir $(.O_FILES)))
FOLDER_STUBS		:=	$(addsuffix _stub,$(.O_FOLDERS))
# - ------------------------------------------------------------------------ - #
TARGET_STUBS		:=	obj/$(TARGET_NAME)/output_stub
TARGET_STUBS_CHECK	:=	$(shell Tools/FileExists.sh $(TARGET_STUBS))
# - ------------------------------------------------------------------------ - #
#OTHER_FILES			+=	$(shell $(TreeTool) $(FILES_FOLDER) %)
#OTHER_FILES_DEP		+=	$(subst $(FILES_FOLDER)/,output/$(TARGET_NAME)/,$(OTHER_FILES))
# - ------------------------------------------------------------------------ - #
#output/$(TARGET_NAME)/%: $(FILES_FOLDER)/%
#	cp $< $@
# - ------------------------------------------------------------------------ - #


# - ------------------------------------------------------------------------ - #
$(TARGET): $(TARGET_STUBS) $(FOLDER_STUBS) $(H_FILES) $(.O_FILES) $(OTHER_FILES_DEP)
	./Tools/version.sh>obj/$(TARGET_NAME)/BuildVersion.cpp
	cp -t $(TARGET_DIR) $(COPY_FILES)
	$(GXX) $(DEFINES) $(LDFLAGS) $(OTHER_O_FILES) $(.O_FILES) obj/$(TARGET_NAME)/BuildVersion.cpp -o $@ $(LIBRARIES)
# - ------------------------------------------------------------------------ - #


# - ------------------------------------------------------------------------ - #
ifndef NON_STANDARD_RUN
run: $(TARGET)
	./$(TARGET) -DIR ./ -SAVE $(TARGET_DIR)/
debug: $(TARGET)
	gdb --args ./$(TARGET) -DIR ./ -SAVE $(TARGET_DIR)/
endif # NON_STANDARD_RUN #
# - ------------------------------------------------------------------------ - #
clean:
	-rm $(.O_FILES) $(.O_FILES:.o=.o.d) $(TARGET_DIR)/*
# - ------------------------------------------------------------------------ - #
cleanmain:
	-rm $(filter %Main.cpp.o,$(.O_FILES) $(.O_FILES:.o=.o.d)) $(TARGET_DIR)/*
# - ------------------------------------------------------------------------ - #
cleandeps:
	-rm $(.O_FILES:.o=.o.d)
# - ------------------------------------------------------------------------ - #
makedirs:
	-mkdir -p $(.O_FOLDERS)
# - ------------------------------------------------------------------------ - #
deps: $(.O_FILES:.o=.o.d)
	@echo Dependencies rebuilt.
# - ------------------------------------------------------------------------ - #
phony: run clean cleanmain cleandeps deps makedirs
# - ------------------------------------------------------------------------ - #

# - ------------------------------------------------------------------------ - #
obj/$(TARGET_NAME)/%.c.o: %.c
	$(GCC) $(DEFINES) $(INCLUDES) $(CFLAGS) -MMD -MF $@.d -c $< -o $@
# - ------------------------------------------------------------------------ - #
obj/$(TARGET_NAME)/%.cpp.o: %.cpp
	$(GXX) $(DEFINES) $(INCLUDES) $(CPPFLAGS) -MMD -MF $@.d -c $< -o $@
# - ------------------------------------------------------------------------ - #
# The below 2 cause a conflict with the -include at the bottom. #
# - ------------------------------------------------------------------------ - #
#obj/$(TARGET_NAME)/%.c.o.d: %.c
#	$(GCC) $(DEFINES) $(INCLUDES) $(CFLAGS) -MMD -MF $@ -E $< -o $@.pp
# - ------------------------------------------------------------------------ - #
#obj/$(TARGET_NAME)/%.cpp.o.d: %.cpp
#	$(GXX) $(DEFINES) $(INCLUDES) $(CPPFLAGS) -MMD -MF $@ -E $< -o $@.pp
# - ------------------------------------------------------------------------ - #
obj/%/_stub:
	mkdir -p obj/$*
	@touch $@
# - ------------------------------------------------------------------------ - #
# Yes, this creates the output folder, but notes the creation under obj #
obj/$(TARGET_NAME)/output_stub:
	mkdir -p output/$(TARGET_NAME)
	@touch $@	
# - ------------------------------------------------------------------------ - #

# - ------------------------------------------------------------------------ - #
ifeq ($(TARGET_STUBS_CHECK),$(TARGET_STUBS))
-include $(.O_FILES:.o=.o.d)
endif 
# - ------------------------------------------------------------------------ - #
	
