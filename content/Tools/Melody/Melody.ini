##############################################################################
#
# Model Loading
#
##############################################################################
bFlattenWorkingModel = true;

SamePointTolerance = 0.001;
SharpAngle = 40;

# reverse face direction when loading models
bReverseWinding = false;

# flip the y texture coordinate during load
bFlipYCoord = false;


smallestEdgeAngle = 109.4712206;   // (180 - 70.52877937);  // tetrahedron angle
smallestCornerAngle = 179;



##############################################################################
#
# Simplification
#
##############################################################################
bScaleQEM = false;



#VertexPlacementEndPoints
#VertexPlacementEndOrMiddle
#VertexPlacementLine
#VertexPlacementOptimal   
vertexPlacementPolicy = VertexPlacementOptimal;

# weight for boundaries
qemBoundaryWeight = 1000.0;

# weight for seams
qemSeamWeight = 1000.0;

# check to ill formed geometry is not created
#   note that illfirmed geoemtry will not be removed if this is set
#   slows simpification
bCheckTopology = false;

# if bCheckTopology is set
bCheckEdgeDihedral = true;

#
# if bCheckTopology is set
bCheckForDanglingEdge = false;

# Make sure that all vertex normals are positive
# if bCheckTopology is set
bCheckLegalNormals = true;

# check for sharp edges during simplification
# if bCheckTopology is set
bCheckSharp = false;

# check for seams during simplification
# if bCheckTopology is set
bCheckSeams = true;



##############################################################################
#
# Texture Coordinate Generation
#
##############################################################################
# pad chart creation in texels
# will be made texels
ChartBorderPadding = 10;

# Make one chart for the model
bForceOneChart = false;

#error tolerance when creating charts
chartTolerance = 0.1;




##############################################################################
#
# Normal Map Generation
#
##############################################################################

# Normal map orientation
# X Y or Z
up = Z;

# power of two
NormalMapWidth = 512;
NormalMapHeight = 512;



# show texel conflict in red
bMissesAsRed = false;
bOutofRangeYellow = false;

#outline normal map for MIP maps
bOutline = true;


# just generate the normal map texture coordinates
#  don't generate normal map
bJustCalcTextureCoords = false;

# used when pixel shader will renormalize tangent basis matrix
bRenormalizeTangentSpaceBasis = false;

# used when light is rotated into tangent space for lighting
bTangentSpaceLighting = false;

# Make a color map sampled from the textures
bColorMap = false;

# Make a displacement map sampled from the textures
bDisplacementMap = false;

# Make a displacement map sampled from the textures
bHeightMap = false;

#treat faces as two side for ray intersection
bTwoSidedFaces = false;

# scale for height maps -> object space (percentage of object bounding box)
heightToDist = 0.01;

# texture coordinates wrap 
bTextureWrap = true;

##############################################################################
#
# Normal Map Generation - Ray Casting
#
##############################################################################


#if ray can't find intersection withing the bounds (when RayBounded is set)
#  take closest intersection point
bClosestIfRayFailure = true;


# near and far bounds for ray casting (RayBounded)
rayBoundHi = 0.005;
rayBoundLo = -0.005;



















